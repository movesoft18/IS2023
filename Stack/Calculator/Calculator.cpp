// Calculator.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <string>
#include <sstream>
using namespace std;

struct StackItem // собственно сам элемент стека
{
    double symbol; // точка
    StackItem* next;  // указатель на следующий элемент в списке
};

StackItem* stack = nullptr; // указатель на вершину стека, изначально стек пуст

bool IsEmpty() // функция проверяет пуст ли стек
{
    return stack == nullptr;
}

void Push(double symbol) // Добавление точки в стек (аналог функции AddFirst линейного списка)
{
    StackItem* item = new StackItem{ symbol, stack }; // этой строчкой можно заменить следующие 2
    stack = item; // теперь вершина стека указывает на добавленный элемент
}

double Pop() // извлекает элемент из стека и возвращает его значение
{
    double result; // здесь будет результат
    StackItem* temp; // временная переменная
    if (stack == nullptr) // если стек пуст
    {
        result = 0;
        return result;  // поэтому пока возвращаем Point {0,0}
    }
    result = stack->symbol; //записываем возвращаемые данные
    temp = stack;   // запоминаем элемент на вершине стека
    stack = temp->next; // перемещаем вершину стека на следующий за извлекаемым элемент
    delete temp;    // освобождаем память, занятую элементом на вершине
    return result; // возвращаем результат
}

double Compute(const string& str)
{
    string part; // здесь будем хранить считанное число из строки или знак операции
    istringstream s(str); // используем строковый поток в памяти для удобства чтения
    // значений из строки выражения. Он позволит нам автоматически
    // выделять числа и операции
    while (s >> part) // в цикле считываем очередной элемент строки
    {
        double f, d;
        int len = part.length(); // вычисляем длину считанного элемента
        if (len == 1) // если она = 1, то, возможно это знак операции
        {
            char e = part[0]; //берем этот символ и сравниваем с операциями
            switch (e)
            {
            case '+': // если это сложение, то извлекаем из стека 2 числа, складываем их и помещаем обратно в стек их сумму
                Push(Pop() + Pop());
                continue;
            case '-': // если это вычитание, то извлекаем из стека 2 числа, вычитаем их и помещаем результат в стек
                Push(-Pop() + Pop()); // поскольку на вершине второй операнд, который нам нужно вычесть, то мы меняем
                continue;                         // его знак на противоположный и складываем со следующим элементом на стеке
            case '*':
                Push(Pop() * Pop()); // умножение - по образу сложения, только операция другая
                continue;
            case '/':  
                f = Pop();
                d = Pop();
                Push(d/f);
                continue;
            case '^':
                f = Pop();
                d = Pop();
                Push(pow(d, f));
                continue;
            }
        }
        double num = stod(part); // а если длина считанной части строки > 1, то это операнд, преобразовываем его
        // в число double
        Push(num);   // и помещаем в стек
    }
    return Pop(); // на вершине стека в конце будет результат вычислений, возвращаем его
}

int main()
{
    cout << Compute("10 20 + 3 * 2 / 1 -") << endl; // (10+20)*3/2-1 = 44
    cout << Compute("7 2 3 * -") << endl; // 7-(2*3) = 1
    cout << Compute("10 3 ^ 5 7 * / 10 +") << endl;
}
