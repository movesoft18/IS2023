#include <iostream>
#include <string>
using namespace std;

int main()
{
    system("chcp 1251 >nul");
    string s1 = "Это контейнерный класс string"; // описание и инициализация строк, несколько способов. способов на самом деле много очень
    string s2{ "Пример" };
    string s10(40, '-');
    s2 = "Который мы изучаем";
    string s3 = s2; // присваивание строк
    if (s3 == s2) cout << "Строки s2 и s3 равны" << endl;
    if (s1 > s2) cout << "Строка s1  больше s2" << endl;
    else
        cout << "Строка s1  не больше s2" << endl;

    s1 = s1 + " " + s2; //Соединение (конкатенация) строк. Как альтернатива есть еще метод concat
    cout << s1 << endl;
   // или можно было так 
    s1 += " " + s2;
    cout << s1 << endl;
    cout << s1.empty() << endl;
    // получение длины строки
    int l1 = s1.length(); // 2 эквивалентных метода
    int l2 = s1.size();
    cout << "l1= " << l1 << " l2 = " << l2 << endl;
    // к элементам строки можно обращаться по индексу
    s1[0] = 'Е'; // меняем первый символ строки на Е
    s1[l1 - 1] = '!'; // меняем последний символ строки на !
    cout << s1 << endl;
    s1.at(1) = 't'; // альтернативный доступ к элементу строки
    try
    {
        s1.at(l2) = '?'; //вызовет исключение out_of_range
    }
    catch (out_of_range e)
    {
        cout << e.what() << endl;
    }
    // вставка подстроки в строку;
    s3 = "хороший ";
    s1.insert(4, s3); // один из вариантов - 1 параметр - позиция, куда вставить подстроку, 2 параметр - что вставить
    cout << s1 << endl;

    // удаление символов из строки
    s1.erase(4, 8); // удаляем из строки s1 начиная с 4-1 позиции (с нуля отсчет!!!) 8 символов
    cout << s1 << endl;
    // получение подстроки (части строки) из строки
    s3 = s1.substr(4, 12); // извлеваем из строки s1 начиная с 5-го символа (4- потому что отсчет с нуля!) 12 символов
    cout << s3 << endl; // и получаем слово "контейнерный"
    s3.clear(); //очищаем строку
    s3 = ""; // аналогичное действие;
    s2 = "0123456789";// замена части строки на другую строку (есть много перегруженных методов replace)
    s3 = "abcdef";
    s2.replace(3, 2, s3); // заменяем в строке s2 начиная с 4-го по порядку символа 2 символа на содержимое строки s3
    cout << s2 << endl; // при этом 4 и 5 символы (это "34") исчезнут и вместо них вставится "abcdef"
    // и наконец поиск подстроки в строке find и rfind
    s2 = "миру мир!";
    int pos = s2.find("мир"); // если результат не равен -1 то pos - содержит позицию (с 0 отсчет!) где встретилась искомая комбинация символов
    if (pos != -1) cout << "найдено в " << pos << " позиции" << endl;
    else cout << "Не найдено" << endl;
    // если нужно продолжить поиск, то используем перегруженный метод find
    pos = s2.find("мир", pos + 1 ); // второй параметр - позиция внутри строки, начиная с которой нужно искать
    if (pos != -1) cout << "еще раз найдено в " << pos << " позиции" << endl;
    else cout << "Не найдено" << endl;

    pos = s2.rfind("мир"); // аналогична find но ищет задом наперед с конца строки
    if (pos != -1) cout << "найдено в " << pos << " позиции" << endl;
    else cout << "Не найдено" << endl;

}

